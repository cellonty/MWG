from commands.db import getname, getstatus, getads
from commands.main import geturl
from commands.main import win_luser
from commands.ore.db import *
import random


async def energy_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    i = await getenergy(message)
    await message.answer(f'''{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è {i} ‚ö°''', parse_mode='html', disable_web_page_preview=True)


async def mine_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    await message.answer(f'''{url}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à—É —à–∞—Ö—Ç—É! üèûÔ∏è

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é ‚ö°.

‚ú® –î–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:- –∫–æ–ø–∞—Ç—å –∂–µ–ª–µ–∑–æ
- –∫–æ–ø–∞—Ç—å –∑–æ–ª–æ—Ç–æ
- –∫–æ–ø–∞—Ç—å –∞–ª–º–∞–∑—ã
- –∫–æ–ø–∞—Ç—å –∞–º–µ—Ç–∏—Å—Ç—ã
- –∫–æ–ø–∞—Ç—å –∞–∫–≤–∞–º–∞—Ä–∏–Ω
- –∫–æ–ø–∞—Ç—å –∏–∑—É–º—Ä—É–¥—ã
- –∫–æ–ø–∞—Ç—å –º–∞—Ç–µ—Ä–∏—é
- –∫–æ–ø–∞—Ç—å –ø–ª–∞–∑–º—É
- –∫–æ–ø–∞—Ç—å –Ω–∏–∫–µ–ª—å
- –∫–æ–ø–∞—Ç—å —Ç–∏—Ç–∞–Ω
- –∫–æ–ø–∞—Ç—å –∫–æ–±–∞–ª—å—Ç
- –∫–æ–ø–∞—Ç—å —ç–∫—Ç–æ–ø–ª–∞–∑–º—É
<b>¬´–°—Ç–∞—Ç—É—Å—ã¬ª —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–¥–∞–µ–º–æ–π —Ä—É–¥—ã –∏ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞.</b>

üõí –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:
- –ø—Ä–æ–¥–∞—Ç—å –∂–µ–ª–µ–∑–æ
- –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ
- –ø—Ä–æ–¥–∞—Ç—å –∞–ª–º–∞–∑—ã
- –ø—Ä–æ–¥–∞—Ç—å –∞–º–µ—Ç–∏—Å—Ç—ã
- –ø—Ä–æ–¥–∞—Ç—å –∞–∫–≤–∞–º–∞—Ä–∏–Ω
- –ø—Ä–æ–¥–∞—Ç—å –∏–∑—É–º—Ä—É–¥—ã
- –ø—Ä–æ–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏—é
- –ø—Ä–æ–¥–∞—Ç—å –ø–ª–∞–∑–º—É
- –ø—Ä–æ–¥–∞—Ç—å –Ω–∏–∫–µ–ª—å
- –ø—Ä–æ–¥–∞—Ç—å —Ç–∏—Ç–∞–Ω
- –ø—Ä–æ–¥–∞—Ç—å –∫–æ–±–∞–ª—å—Ç
- –ø—Ä–æ–¥–∞—Ç—å —ç–∫—Ç–æ–ø–ª–∞–∑–º—É
- –ø—Ä–æ–¥–∞—Ç—å –ø–∞–ª–ª–∞–¥–∏–π

üìä –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
- –ú–æ—è —à–∞—Ö—Ç–∞''', parse_mode='html')


async def kursrud_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    await message.answer(f'''{url}, –∫—É—Ä—Å —Ä—É–¥—ã:
‚õì 1 –∂–µ–ª–µ–∑–æ - 230.000$
üåï 1 –∑–æ–ª–æ—Ç–æ - 1.000.000$
üíé 1 –∞–ª–º–∞–∑ - 116.000.000$
üéÜ 1 –∞–º–µ—Ç–∏—Å—Ç - 217.000.000$
üí† 1 –∞–∫–≤–∞–º–∞—Ä–∏–Ω - 461.000.000$
üçÄ 1 –∏–∑—É–º—Ä—É–¥ - 792.000.000$
üåå 1 –º–∞—Ç–µ—Ä–∏—è - 8.000.000.000$
üí• 1 –ø–ª–∞–∑–º–∞ - 12.000.000.000$
ü™ô 1 –Ω–∏–∫–µ–ª—å - 30.000.000.000$
‚öô 1 —Ç–∏—Ç–∞–Ω - 70.000.000.000.000$
üß™ 1 –∫–æ–±–∞–ª—å—Ç - 120.000.000.000.000$
‚òÑÔ∏è 1 —ç–∫—Ç–æ–ø–ª–∞–∑–º–∞ - 270.000.000.000.000$
‚öó 1 –ø–∞–ª–ª–∞–¥–∏–π - 2.000.000.000.000.000$''', parse_mode='html')


async def inventary_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    corn = await getcorn_garden(user_id)
    iron, gold, diamond, amestit, aquamarine, emeralds, matter, plasma, nickel, titanium, cobalt, ectoplasm = await getmine(
        message)
    resources = {
        "iron": {"name": "‚õì –ñ–µ–ª–µ–∑–æ", "quantity": iron},
        "gold": {"name": "üåï –ó–æ–ª–æ—Ç–æ", "quantity": gold},
        "diamond": {"name": "üíé –ê–ª–º–∞–∑", "quantity": diamond},
        "amethyst": {"name": "üéÜ –ê–º–µ—Ç–∏—Å—Ç", "quantity": amestit},
        "aquamarine": {"name": "üí† –ê–∫–≤–∞–º–∞—Ä–∏–Ω", "quantity": aquamarine},
        "emeralds": {"name": "üçÄ –ò–∑—É–º—Ä—É–¥", "quantity": emeralds},
        "matter": {"name": "üåå –ú–∞—Ç–µ—Ä–∏—è", "quantity": matter},
        "plasma": {"name": "üí• –ü–ª–∞–∑–º–∞", "quantity": plasma},
        "nickel": {"name": "ü™ô –ù–∏–∫–µ–ª—å", "quantity": nickel},
        "titanium": {"name": "‚öôÔ∏è –¢–∏—Ç–∞–Ω", "quantity": titanium},
        "cobalt": {"name": "üß™ –ö–æ–±–∞–ª—å—Ç", "quantity": cobalt},
        "ectoplasm": {"name": "‚òÑÔ∏è –≠–∫—Ç–æ–ø–ª–∞–∑–º–∞", "quantity": ectoplasm},
        "corn": {"name": "ü•ú –ó—ë—Ä–Ω–∞", "quantity": corn},
    }

    positive_resources = {name: info for name, info in resources.items() if info["quantity"] > 0}

    if positive_resources:
        result_message = "\n".join([f'{info["name"]}: {int(info["quantity"]):,} —à—Ç.' for name, info in positive_resources.items()])
        await message.answer(f"{url},\n{result_message}", parse_mode='html')
    else:
        await message.answer(f"{url}, –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", parse_mode='html')


async def mine_level(expe):
    levels = [
        ('–≠–∫—Ç–æ–ø–ª–∞–∑–º–∞ ‚òÑÔ∏è', 'SOON...', '???', 10000000000),
        ('–ö–æ–±–∞–ª—å üß™', '–≠–∫—Ç–æ–ø–ª–∞–∑–º–∞ ‚òÑÔ∏è', '10.000.000.000', 20000000),
        ('–¢–∏—Ç–∞–Ω ‚öôÔ∏è', '–ö–æ–±–∞–ª—å üß™', '20.000.000', 5000000),
        ('–ù–∏–∫–µ–ª—å ü™ô', '–¢–∏—Ç–∞–Ω ‚öôÔ∏è', '5.000.000', 950000),
        ('–ü–ª–∞–∑–º–∞ üí•', '–ù–∏–∫–µ–ª—å ü™ô', '950.000', 500000),
        ('–ú–∞—Ç–µ—Ä–∏—è üåå', '–ü–ª–∞–∑–º–∞ üí•', '500.000', 100000),
        ('–ò–∑—É–º—Ä—É–¥ üçÄ', '–ú–∞—Ç–µ—Ä–∏—è üåå', '100.000', 60000),
        ('–ê–∫–≤–∞–º–∞—Ä–∏–Ω üí†', '–ò–∑—É–º—Ä—É–¥ üçÄ', '60.000', 25000),
        ('–ê–º–µ—Ç–∏—Å—Ç üéÜ', '–ê–∫–≤–∞–º–∞—Ä–∏–Ω üí†', '25.000', 10000),
        ('–ê–ª–º–∞–∑—ã üíé', '–ê–º–µ—Ç–∏—Å—Ç üéÜ', '10.000', 2000),
        ('–ó–æ–ª–æ—Ç–æ üåï', '–ê–ª–º–∞–∑—ã üíé', '2.000', 500),
        ('–ñ–µ–ª–µ–∑–æ ‚õì', '–ó–æ–ª–æ—Ç–æ üåï', '500', 0)
    ]

    for level, next_level, limit, threshold in levels:
        if expe >= threshold:
            return level, next_level, limit


async def mymine_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    expe, energy = await getexpe(message)
    mine_level_t, mine_level_s, tr = await mine_level(expe)

    expe = '{:,}'.format(expe).replace(',', '.')

    await message.answer(f'''{url}, —ç—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —à–∞—Ö—Ç—ã:
üèÜ –û–ø—ã—Ç: {expe}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy}
‚õè –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {mine_level_t}
‚û° –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {mine_level_s}
‚≠êÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è {tr} –æ–ø—ã—Ç–∞''', parse_mode='html')


async def digmine(message):
    user_name = await getname(message)
    ads = await getads(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    expe, energy = await getexpe(message)
    result = await win_luser()
    rwin, rloser = result

    if energy == 0:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–æ–ø–∫–∏ {rloser}', parse_mode='html')
        return

    status_limits = {0: 1, 1: 2, 2: 3, 3: 5, 4: 10}
    status = await getstatus(message.from_user.id)
    coff = status_limits.get(status, status_limits[0])

    txt = message.text.split()
    if len(txt) < 2:
        await message.answer(f'{url}, –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {rloser}', parse_mode='html', disable_web_page_preview=True)
        return
    else:
        ruda = txt[1].lower()

    ruda_data = {
        '–∂–µ–ª–µ–∑–æ': ('iron', 40, 1, 0),
        '–∑–æ–ª–æ—Ç–æ': ('gold', 4, 3, 500),
        '–∞–ª–º–∞–∑—ã': ('diamond', 2, 5, 2000),
        '–∞–º–µ—Ç–∏—Å—Ç—ã': ('amethyst', 1, 15, 10000),
        '–∞–∫–≤–∞–º–∞—Ä–∏–Ω': ('aquamarine', 1, 30, 25000),
        '–∏–∑—É–º—Ä—É–¥—ã': ('emeralds', 1, 55, 60000),
        '–º–∞—Ç–µ—Ä–∏—é': ('matter', 1, 65, 100000),
        '–ø–ª–∞–∑–º—É': ('plasma', 1, 180, 500000),
        '–Ω–∏–∫–µ–ª—å': ('nickel', 1, 500, 950000),
        '—Ç–∏—Ç–∞–Ω': ('titanium', 1, 2300, 5000000),
        '–∫–æ–±–∞–ª—å—Ç': ('cobalt', 1, 3600, 20000000),
        '—ç–∫—Ç–æ–ø–ª–∞–∑–º—É': ('ectoplasm', 1, 7200, 10000000000)
    }

    if ruda in ruda_data:
        eng_ruda, min_i, op, min_expe = ruda_data[ruda]
        if expe < min_expe:
            min_expe = '{:,}'.format(expe).replace(',', '.')
            await message.answer(f'{url}, —á—Ç–æ–±—ã –∫–æ–ø–∞—Ç—å {ruda} –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è {min_expe} –æ–ø—ã—Ç–∞ {rloser}', parse_mode='html')
            return

        i = random.randint(min_i, min_i + 5) * coff
        await digdb(i, user_id, eng_ruda, op)
        opit = expe + op
        opit = '{:,}'.format(opit).replace(',', '.')

        await message.answer(f'{url}, +{i} {ruda}.\nüí° –≠–Ω–µ—Ä–≥–∏—è: {energy - 1}, –æ–ø—ã—Ç: {opit}\n\n{ads}', disable_web_page_preview=True)
    else:
        await message.answer(f'{url}, –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {rloser}')


async def sellruda_cmd(message):
    user_name = await getname(message)
    user_id = message.from_user.id
    url = await geturl(user_id, user_name)
    txt = message.text.split()
    result = await win_luser()
    rwin, rloser = result
    iron, gold, diamond, amestit, aquamarine, emeralds, matter, plasma, nickel, titanium, cobalt, ectoplasm = await getmine(message)

    if len(txt) < 2:
        return
    ruda = txt[1].lower()

    ruda_data = {
        '–∂–µ–ª–µ–∑–æ': ('iron', 230000),
        '–∑–æ–ª–æ—Ç–æ': ('gold', 1000000),
        '–∞–ª–º–∞–∑—ã': ('diamond', 116000000),
        '–∞–º–µ—Ç–∏—Å—Ç—ã': ('amestit', 217000000),
        '–∞–∫–≤–∞–º–∞—Ä–∏–Ω': ('aquamarine', 461000000),
        '–∏–∑—É–º—Ä—É–¥—ã': ('emeralds', 792000000),
        '–º–∞—Ç–µ—Ä–∏—é': ('matter', 8000000000),
        '–ø–ª–∞–∑–º—É': ('plasma', 12000000000),
        '–Ω–∏–∫–µ–ª—å': ('nickel', 30000000000),
        '—Ç–∏—Ç–∞–Ω': ('titanium', 70000000000000),
        '–∫–æ–±–∞–ª—å—Ç': ('cobalt', 120000000000000),
        '—ç–∫—Ç–æ–ø–ª–∞–∑–º—É': ('ectoplasm', 270000000000000)
    }

    if ruda in ruda_data:
        if len(txt) >= 3:
            try: kolvo = int(txt[2].lower())
            except: return
        else:
            kolvo = int(eval(ruda_data[ruda][0]))

        if kolvo <= 0 or kolvo > eval(ruda_data[ruda][0]):
            await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {ruda} {rloser}', parse_mode='html')
            return

        i = kolvo * int(ruda_data[ruda][1])
        i2 = '{:,}'.format(i).replace(',', '.')
        await sell_ruda_db(i, user_id, ruda_data[ruda][0], kolvo)
        await message.answer(f'{url}, –≤—ã –ø—Ä–æ–¥–∞–ª–∏ {kolvo} {ruda} –∑–∞ {i2}$ ‚úÖ', parse_mode='html')