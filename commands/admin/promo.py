from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from commands.admin.admin import admin_menu
from commands.db import getads
from commands.admin.admin_db import *
from commands.main import win_luser
import config as cfg
from commands.admin.loger import new_log
from bot import bot, dp
from assets.antispam import antispam


class new_promo_state(StatesGroup):
    name = State()
    summ = State()
    activ = State()


class dell_promo_state(StatesGroup):
    name = State()


async def promo_menu(message: types.message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ"), types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–º–æ –∏–Ω—Ñ–æ"))
    keyboard.add(types.KeyboardButton("üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"))
    await message.answer('üëæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)


async def new_promo(message, state: FSMContext, type='name'):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await promo_menu(message)
        return

    if type == 'name':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        await message.answer("üòÑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ", reply_markup=keyboard)
        await new_promo_state.name.set()
        return

    if type == 'summ':
        await state.update_data(name=message.text.split()[0])
        await message.answer("üòÉ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞—É—Ä—ã –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é")
        await new_promo_state.summ.set()
        return

    try:
        summ = message.text.split()[0]
        summ = (summ).replace('–∫', '000').replace('–º', '000000').replace('.', '')
        summ = int(summ)
    except:
        await message.answer("üòî –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º...")
        return

    if type == 'activ':
        await state.update_data(summ=summ)
        await message.answer("üòä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
        await new_promo_state.activ.set()
        return

    await state.update_data(activ=summ)
    data = await state.get_data()
    await state.finish()

    data2 = (data['name'], data['summ'], data['activ'])
    if (await new_promo_db(data2)):
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await admin_menu(message)
        return

    summ = '{:,}'.format(data['summ']).replace(',', '.')
    summ2 = '{:,}'.format(data['summ'] * data['activ']).replace(',', '.')
    activ = '{:,}'.format(data['activ']).replace(',', '.')

    await message.answer(f'''üé∞ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥:\n
–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{data['name']}</code>
–°—É–º–º–∞: {summ}
–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activ}\n
–û–±—â–∞—è —Å—É–º–º–∞: {summ2}''')
    await admin_menu(message)


async def dell_promo(message, state: FSMContext, type='name'):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await promo_menu(message)
        return

    if type == 'name':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard)
        await dell_promo_state.name.set()
        return

    name = message.text.split()[0]
    res = await dell_promo_db(name)
    if res:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await state.finish()
    await promo_menu(message)


@antispam
async def activ_promo(message: types.Message):
    rwin, rloser = await win_luser()
    ads = await getads()
    if len(message.text.split()) < 2:
        await message.answer(f"–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {rloser}")
        return

    name = message.text.split()[1]
    res = await activ_promo_db(name, message.from_user.id)

    if res == 'no promo':
        await message.answer(f'–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    if res == 'activated':
        await message.answer(f'–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    if res == 'used':
        await message.answer(f'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ {rloser}\n\n{ads}', disable_web_page_preview=True)
        return

    summ = '{:,}'.format(res).replace(',', '.')
    await new_log(f'#–ø—Ä–æ–º–æ–∞–∫—Ç–∏–≤\n–ò–≥—Ä–æ–∫: {message.from_user.id}\n–ü—Ä–æ–º–æ: {name}\n–°—É–º–º–∞: {summ}', 'promo')
    await message.answer(f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å—É–º–º—É {summ} {rwin}")


@dp.message_handler(lambda message: message.text == '‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã')
async def promo_menu_s(message: types.Message):
    await promo_menu(message)


@dp.message_handler(lambda message: message.text == 'üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é')
async def backto_adm_menu(message: types.Message):
    await admin_menu(message)


@dp.message_handler(lambda message: message.text == 'üìñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ')
async def new_promo_s(message: types.Message, state: FSMContext):
    await new_promo(message, state=state)


@dp.message_handler(state=new_promo_state.name)
async def new_promo_s(message: types.Message, state: FSMContext):
    await new_promo(message, state=state, type='summ')


@dp.message_handler(state=new_promo_state.summ)
async def new_promo_s(message: types.Message, state: FSMContext):
    await new_promo(message, state=state, type='activ')


@dp.message_handler(state=new_promo_state.activ)
async def new_promo_s(message: types.Message, state: FSMContext):
    await new_promo(message, state=state, type='finish')


@dp.message_handler(lambda message: message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ')
async def dell_promo_s(message: types.Message, state: FSMContext):
    await dell_promo(message, state=state)


@dp.message_handler(state=dell_promo_state.name)
async def dell_promo_s(message: types.Message, state: FSMContext):
    await dell_promo(message, state=state, type='finish')


@dp.message_handler(lambda message: message.text.lower().startswith('–ø—Ä–æ–º–æ'))
async def activ_promo_s(message: types.Message):
    await activ_promo(message)