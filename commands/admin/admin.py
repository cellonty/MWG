import sys
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from commands.db import getidname, getstatus
from commands.admin.admin_db import *
from commands.main import geturl
from commands.main import win_luser
import config as cfg
from commands.admin.loger import new_log
from bot import bot

from assets.antispam import earning_msg
from assets.gettime import bonus_time, kazna_time
from commands.help import help_msg


class new_ads_state(StatesGroup):
    txt = State()


async def give_money(message):
    user_id = message.from_user.id
    status = await getstatus(user_id)
    if user_id not in cfg.admin and status == 0:
        return await message.answer('üëÆ‚Äç‚ôÇÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "–î–æ–Ω–∞—Ç"')

    user_name = await getidname(user_id)
    rwin, rloser = await win_luser()
    url = await geturl(user_id, user_name)

    try:
        r_user_id = message.reply_to_message.from_user.id
        r_user_name = await getidname(r_user_id)
        r_url = await geturl(r_user_id, r_user_name)
    except:
        return await message.answer(f'{url}, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rloser}')

    try:
        su = message.text.split()[1]
        su = (su).replace('–∫', '000').replace('–º', '000000').replace('.', '')
        summ = int(su)
        summ2 = '{:,}'.format(summ).replace(',', '.')
    except:
        return await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å {rloser}')

    if user_id in cfg.admin:
        await give_money_db(user_id, r_user_id, summ, 'rab')
        await message.answer(f'{url}, –≤—ã –≤—ã–¥–∞–ª–∏ {summ2}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {rwin}')
    else:
        res = await give_money_db(user_id, r_user_id, summ, 'adm')
        if res == 'limit':
            return await message.answer(f'{url}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –≤—ã–¥–∞—á—É –∞—É—Ä—ã  {rloser}')

        await message.answer(f'{url}, –≤—ã –≤—ã–¥–∞–ª–∏ {summ2}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {rwin}')
    await new_log(f'#–≤—ã–¥–∞—á–∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id})\n–°—É–º–º–∞: {summ2}$\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_user_name} ({r_user_id})', 'issuance_money')


async def give_bcoins(message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    user_name = await getidname(user_id)
    rwin, rloser = await win_luser()
    url = await geturl(user_id, user_name)

    try:
        r_user_id = message.reply_to_message.from_user.id
        r_user_name = await getidname(r_user_id)
        r_url = await geturl(r_user_id, r_user_name)
    except:
        return await message.answer(f'{url}, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∞—É—Ä—É –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rloser}')

    try:
        su = message.text.split()[1]
        su = (su).replace('–∫', '000').replace('–º', '000000').replace('.', '')
        summ = int(su)
        summ2 = '{:,}'.format(summ).replace(',', '.')
    except:
        return await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å {rloser}')

    await give_bcoins_db(r_user_id, summ)
    await message.answer(f'{url}, –≤—ã –≤—ã–¥–∞–ª–∏ {summ2}üí≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {rwin}')
    await new_log(f'#–±–∫–æ–∏–Ω-–≤—ã–¥–∞—á–∞\n–ê–¥–º–∏–Ω {user_name} ({user_id})\n–°—É–º–º–∞: {summ2}$\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_user_name} ({r_user_id})', 'issuance_bcoins')


async def new_ads(message, state: FSMContext, type=0):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if type == 0:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã ('-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å)\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.</i>", reply_markup=keyboard)
        await new_ads_state.txt.set()
        return

    txt = message.text
    if txt == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await admin_menu(message)
        return

    txt = '' if txt == '-' else txt
    try:
        ads = txt.replace(r'\n', '\n')
        msg = '‚öôÔ∏è –†–µ–∫–ª–∞–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É–¥–∞–ª–µ–Ω–∞' if txt == '' else '‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n\n' + ads
        await message.answer(msg, disable_web_page_preview=True)
        await upd_ads(txt)
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ HTML')

    await state.finish()
    await admin_menu(message)


async def unloading(message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    if message.chat.type != 'private':
        return

    time = datetime.now().strftime("%Y-%m-%d –≤ %H:%M:%S")
    with open('users.db', 'rb') as file:
        await bot.send_document(message.chat.id, file, caption=f'üõ° –ö–æ–ø–∏—è –±–¥ —Å–æ–∑–¥–∞–Ω–∞ <blockquote>{time}</blockquote>')


async def admin_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='üìç –†–∞—Å—Å—ã–ª–∫–∞'), types.KeyboardButton(text='üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')],
            [types.KeyboardButton(text='‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã'), types.KeyboardButton(text='üì• –í—ã–≥—Ä—É–∑–∫–∞')],
            [types.KeyboardButton(text='‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')]
        ],
        resize_keyboard=True
    )

    await message.answer('<b>üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é:</b>', reply_markup=keyboard)


async def control(message: types.Message):
    print(546546)
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), types.KeyboardButton("üíΩ –û–ó–£"))
    keyboard.add(types.KeyboardButton("üëÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"))

    await message.answer('<b>üïπÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>', reply_markup=keyboard)


def sizeof_fmt(num):
    for unit in ['–ë', '–ö–ë', '–ú–ë']:
        if abs(num) < 1024.0:
            return "%3.1f %s" % (num, unit)
        num /= 1024.0
    return "%.1f %s" % (num, '–¢–ë')


async def RAM_control(message: types.Message):
    user_id = message.from_user.id
    if user_id not in cfg.admin:
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="ram-clear"))

    earning = sizeof_fmt(sys.getsizeof(earning_msg))
    help_menu = sizeof_fmt(sys.getsizeof(help_msg))
    bonus = sizeof_fmt(sys.getsizeof(bonus_time))
    kazna = sizeof_fmt(sys.getsizeof(kazna_time))

    await message.answer(f'''üíΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –û–ó–£:
üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earning}
üÜò –ü–æ–º–æ—â—å: {help_menu}
üéÅ –ë–æ–Ω—É—Å—ã: {bonus}
üí∞ –ö–∞–∑–Ω–∞: {kazna}''', reply_markup=keyboard)


async def RAM_clear(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in cfg.admin:
        return

    global earning_msg, help_msg, bonus_time, kazna_time
    earning_msg.clear()
    help_msg.clear()
    bonus_time.clear()
    kazna_time.clear()

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üóë –û—á–∏—â–µ–Ω–æ!')


def reg(dp: Dispatcher):
    dp.register_message_handler(admin_menu, commands='adm')
    dp.register_message_handler(give_money, lambda message: message.text.lower().startswith('–≤—ã–¥–∞—Ç—å'))
    dp.register_message_handler(give_bcoins, lambda message: message.text.lower().startswith('–±–¥–∞—Ç—å'))
    dp.register_message_handler(unloading, lambda message: message.text.lower().startswith('üì• –í—ã–≥—Ä—É–∑–∫–∞'))
    dp.register_message_handler(control, lambda message: message.text == 'üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    dp.register_message_handler(RAM_control, lambda message: message.text == 'üíΩ –û–ó–£')
    dp.register_callback_query_handler(RAM_clear, text='ram-clear')
    dp.register_message_handler(new_ads, lambda message: message.text.lower().startswith('‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã'), state=FSMContext)
    dp.register_message_handler(lambda message, state: new_ads(message, state, type=1), state=new_ads_state.txt)