from commands.earnings.garden.db import *
from commands.db import getname, getonlibalance, getidname
from commands.main import geturl
from commands.main import win_luser
from commands.assets.kb import helpGarden_kb

async def harden_list(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    await message.answer(f'''{url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥ –∏ —É–ª—É—á—à–∞—Ç—å –µ–≥–æ. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥, —Ü–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ 1.000.000.000$. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ–π —Å–∞–¥" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–∞–¥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''', parse_mode='html')


async def my_garden(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    result = await win_luser()
    rwin, rloser = result
    water, tree, nalogs, balance, garden = await getgarden(id)
    dox = (tree + 1) * 3
    balance = int(balance)
    nalogs = int(nalogs)
    balance = '{:,}'.format(balance).replace(',', '.')
    nalogs = '{:,}'.format(nalogs).replace(',', '.')
    if garden == 0:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" {rloser}', parse_mode='html')
    else:
        await message.answer(f'''{url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–°–∞–¥":
ü•ú –î–æ—Ö–æ–¥: {dox} –∑—ë—Ä–µ–Ω/—á–∞—Å
üå≥ –î–µ—Ä–µ–≤—å—è: {tree} —à—Ç./10 —à—Ç.
üí¶ –í–æ–¥—ã: {water}/100
üí∏ –ù–∞–ª–æ–≥–∏: {nalogs}$/5.000.000$
üß∫ –ù–∞ —Å—á–µ—Ç—É: {balance} –∑—ë—Ä–µ–Ω

‚≠ê –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏–Ω–∞—á–µ –æ–Ω–æ –∑–∞—Å–æ—Ö–Ω–µ—Ç.''', parse_mode='html', reply_markup=helpGarden_kb)


async def buy_garden(message):
    id = message.from_user.id
    name = await getname(message)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 1:
        await message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∞–¥. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {rloser}', parse_mode='html')
    else:
        balance = await getonlibalance(message)
        if balance < 1000000000:
            await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –°–∞–¥–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1.00.000.000$ {rloser}', parse_mode='html')
        else:
            await buy_garden_db(id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å–∞–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {rwin}', parse_mode='html')


async def buy_tree(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç—å –¥–µ—Ä–µ–≤—å—è {rloser}', parse_mode='html')
    else:
        tree = await gettree(id)
        if tree == 10:
            await call.message.answer(f'{url}, —É –≤–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ {rloser}', parse_mode='html')
            return
        ch = 1000000000 * (1 + 0.15) ** (tree + 1)
        ch = int(ch)
        ch2 = '{:,}'.format(ch).replace(',', '.')
        balance = await getonlibalance(call)
        if balance < ch:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ä–µ–≤–∞. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å {ch2}$ {rloser}', parse_mode='html')
        else:
            await buy_tree_db(id, ch)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≤–∞—à–µ–º —Å–∞–¥—É –∑–∞ {ch2}$ {rwin}', parse_mode='html')


async def snyt_pribl_garden(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å —Å –Ω–µ–≥–æ –ø—Ä–∏—ã–±–ª—å {rloser}', parse_mode='html')
    else:
        balance = await getgardenbalance(id)
        balance2 = '{:,}'.format(balance).replace(',', '.')
        if balance == 0:
            await call.message.answer(f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {rloser}', parse_mode='html')
        else:
            await snyt_pribl_garden_db(id, balance)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {balance2} –∑—ë—Ä–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ {rwin}', parse_mode='html')


async def polit_dereva_garden(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤—å—è {rloser}', parse_mode='html')
    else:
        water = await getwater(id)
        if water == 200:
            await call.message.answer(f'{url}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rloser}', parse_mode='html')
        else:
            await politderevo(id)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rwin}', parse_mode='html')


async def polit_dereva_garden_2(message):
    id = message.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 0:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤—å—è {rloser}', parse_mode='html')
    else:
        water = await getwater(id)
        if water == 200:
            await message.answer(f'{url}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rloser}', parse_mode='html')
        else:
            await politderevo(id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {rwin}', parse_mode='html')


async def oplata_nalogov_garden(call):
    id = call.from_user.id
    name = await getidname(id)
    url = await geturl(id, name)
    garden = await getogarden(id)
    result = await win_luser()
    rwin, rloser = result
    if garden == 0:
        await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –Ω–µ–≥–æ –Ω–∞–ª–æ–≥–∏ {rloser}', parse_mode='html')
    else:
        nalogs = await get_garden_nalogs(id)
        nalogs2 = '{:,}'.format(nalogs).replace(',', '.')
        balance = await getonlibalance(call)
        if balance < nalogs:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {rloser}', parse_mode='html')
            return
        if nalogs == 0:
            await call.message.answer(f'{url}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {rwin}', parse_mode='html')
        else:
            await oplata_nalogs_garden_db(id, nalogs)
            await call.message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {nalogs2}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {rwin}', parse_mode='html')