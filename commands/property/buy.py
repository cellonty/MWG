from aiogram import types, Dispatcher
import commands.property.db as db
from commands.db import url_name, get_balance
from commands.main import win_luser
from commands.property.lists import *
from assets.antispam import antispam


@antispam
async def buy_helicopter(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[1] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = helicopters.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[4]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –≤–µ—Ä—Ç–æ–ª—ë—Ç "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'helicopter', hdata[4])


@antispam
async def buy_phone(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[4] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = phones.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[2]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'phone', hdata[2])


@antispam
async def buy_car(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[2] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = cars.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[5]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –º–∞—à–∏–Ω—É "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'car', hdata[5])


@antispam
async def buy_house(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[4] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = house.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[2]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –¥–æ–º "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'house', hdata[2])


@antispam
async def buy_yahta(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[3] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = yahts.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[4]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —è—Ö—Ç—É "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'yahta', hdata[4])


@antispam
async def buy_plane(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    balance = await get_balance(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[6] != 0:
        await message.answer(f'{name}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    try:
        num = int(message.text.split()[2])
    except:
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    hdata = planes.get(num, 'no')
    if hdata == 'no':
        await message.answer(f'{name}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {rloser}')
        return

    if balance < hdata[4]:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å–∞–º–æ–ª—ë—Ç "{hdata[0]}" üéâ')
    await db.buy_property(user_id, num, 'plane', hdata[4])


@antispam
async def sell_helicopter(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[1] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = helicopters.get(data[1])
    summ = int(hdata[4] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –≤–µ—Ä—Ç–æ–ª—ë—Ç –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'helicopter', summ)


@antispam
async def sell_phone(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[4] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = phones.get(data[4])
    summ = int(hdata[2] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'phone', summ)


@antispam
async def sell_car(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[2] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = cars.get(data[2])
    summ = int(hdata[5] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –º–∞—à–∏–Ω—É –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'car', summ)


@antispam
async def sell_house(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[5] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = house.get(data[5])
    summ = int(hdata[2] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –¥–æ–º –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'house', summ)


@antispam
async def sell_yahta(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[3] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = yahts.get(data[3])
    summ = int(hdata[4] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —è—Ö—Ç—É –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'yahta', summ)


@antispam
async def sell_plane(message: types.Message):
    user_id = message.from_user.id
    name = await url_name(user_id)
    rwin, rloser = await win_luser()
    data = await db.get_property(user_id)

    if data[6] == 0:
        await message.answer(f'{name}, —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ {rloser}')
        return

    hdata = planes.get(data[6])
    summ = int(hdata[4] * 0.75)
    summ2 = '{:,}'.format(summ).replace(',', '.')

    await message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–∞–º–æ–ª—ë—Ç –∑–∞ {summ2}$ üéâ')
    await db.sell_property(user_id, 'plane', summ)


def reg(dp: Dispatcher):
    dp.register_message_handler(buy_helicopter, lambda message: message.text.lower().startswith(('–∫—É–ø–∏—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç', '–∫—É–ø–∏—Ç—å –≤–µ—Ä—Ç–æ–ª—ë—Ç')))
    dp.register_message_handler(buy_phone, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'))
    dp.register_message_handler(buy_car, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É'))
    dp.register_message_handler(buy_house, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –¥–æ–º'))
    dp.register_message_handler(buy_yahta, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å —è—Ö—Ç—É'))
    dp.register_message_handler(buy_plane, lambda message: message.text.lower().startswith(('–∫—É–ø–∏—Ç—å —Å–∞–º–æ–ª–µ—Ç', '–∫—É–ø–∏—Ç—å —Å–∞–º–æ–ª—ë—Ç')))

    dp.register_message_handler(sell_helicopter, lambda message: message.text.lower().startswith(('–ø—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç', '–ø—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª—ë—Ç')))
    dp.register_message_handler(sell_phone, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'))
    dp.register_message_handler(sell_car, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É'))
    dp.register_message_handler(sell_house, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å –¥–æ–º'))
    dp.register_message_handler(sell_yahta, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É'))
    dp.register_message_handler(sell_plane, lambda message: message.text.lower().startswith(('–ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç', '–ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª—ë—Ç')))